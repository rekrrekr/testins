// Datasource
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// Generator
generator client {
  provider = "prisma-client-js"
}

model User {
  id        String   @id @default(cuid())
  name      String?
  email     String?  @unique
  image     String?
  createdAt DateTime @default(now())
  personas  Persona[]
  chats     Chat[]
  wallet    Wallet?
  saves     Save[]
  txns      Transaction[]

  accounts  Account[]
  sessions  Session[]
}

model Persona {
  id         String   @id @default(cuid())
  owner      User     @relation(fields: [ownerId], references: [id])
  ownerId    String
  name       String
  bio        String
  tagsCsv    String   // store tags as comma-separated values
  visibility String   @default("PUBLIC")
  heat       Int      @default(0)
  flagged    Boolean  @default(false)
  createdAt  DateTime @default(now())
  chats      Chat[]
  saves      Save[]
}

model Chat {
  id            String   @id @default(cuid())
  user          User     @relation(fields: [userId], references: [id])
  userId        String
  persona       Persona  @relation(fields: [personaId], references: [id])
  personaId     String
  createdAt     DateTime @default(now())
  lastMessageAt DateTime?
  messages      Message[]
}

model Message {
  id        String   @id @default(cuid())
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String
  role      String   // 'user' | 'bot'
  content   String
  createdAt DateTime @default(now())
}

model Wallet {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  balance   Int      @default(0)
}

model Transaction {
  id              String   @id @default(cuid())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  amount          Int
  type            String   // 'purchase' | 'debit'
  stripeSessionId String?  @unique
  createdAt       DateTime @default(now())
}

model Save {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  persona   Persona  @relation(fields: [personaId], references: [id])
  personaId String
  createdAt DateTime @default(now())

  @@unique([userId, personaId])
}

// NextAuth adapter models (compatible with JWT sessions but needed for Email/Google)
model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}